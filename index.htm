<html>

<head>
    <title>The Tiny Library</title>
    <link href="lib/prism.css" rel="stylesheet">
    <link href="index.css" rel="stylesheet">
    <script type="text/javascript" src="lib/jquery-3.0.0.min.js"></script>
    <script type="text/javascript" src="lib/prism.js"></script>
    <script type="text/javascript" src="tiny.js"></script>
    <script type="text/javascript" src="index.js"></script>
</head>

<body>
    <div class="sidebar">
        <div id="content-table" class="content-table">
        </div>
    </div>
    <div id="content-block" class="content">
        <div id="test-info" class="test-info">
            CODE TEST
        </div>

        <h1>The Tiny Function Library</h1>

        <h2><a class="mark" name="">Introduction</a></h2>

        <p>This small library is meant to provide some handy functions which are missing in DOM manipulating frameworks like
            jQuery or others.</p>
        <p>And it doesn't want to be another armed-to-teeth full featured framework (might also be hard-to-learn).</p>
        <p>Its goal is providing a minimalist building foundation for modern App-like web pages.</p>

        <h3><a class="mark" name="import">tiny.import()</a></h3>

        <p>By default, Tiny will not inject global functions and object methods used in below examples into global namespace
            (the <code>window</code> object).</p>
        <p>To use those short function names, pleas call <code>tiny.import()</code> ahead of all calls.</p>
        <pre><code class="language-javascript">
           // register global function names for tiny methods
           tiny.import();
        </code></pre>

        <h3><a class="mark" name="show-me">tiny.me()</a></h3>

        <p>Show a structural overview of <code>tiny</code> namespace. This function will also show a list of injected global
            functions and prototype methods.</p>
        <pre><code class="language-javascript">
           // show tiny definitions in console
           tiny.me();
        </code></pre>

        <hr/>

        <h2><a class="mark" name="basic-functions">Base Functions</a></h2>

        <h3><a class="mark" name="console-shorthands">_log(), _dir(), ... _error()</a></h3>

        <p>Tiny provides several shorthands to console methods: <code>_log()</code>, <code>_dir()</code>, <code>_info()</code>,
            <code>_warn()</code> and <code>_error()</code>.</p>
        <p>You might use these functions just like the original methods of <code>console</code>. These are not wrapper functions,
            and will not show the wrapper function name &amp; location in the console output.</p>
        <pre><code class="language-javascript">
            // enable log output
            tiny.verbose(true);

            _log(param1, param2, ...);    // == console.log(param1, param2, ...)
            _dir(param1, param2, ...);    // == console.dir(param1, param2, ...)
            _info(param1, param2, ...);   // == console.info(param1, param2, ...)
            _warn(param1, param2, ...);   // == console.warn(param1, param2, ...)
            _error(param1, param2, ...);  // == console.error(param1, param2, ...)
        </code></pre>
        <p>By default, output of <code>_log()</code> &amp; <code>_dir()</code> is turned off. Don't bother end users with verbose
            logs.
        </p>
        <p>You can easily turn the console log on or off by calling <code>tiny.verbose(true)</code> in develop or production
            environments.
        </p>

        <h4>EXAMPLES</h4>
        <pre class="run-code"><code class="language-javascript">
            // enable _log() output when you need them
            tiny.verbose(true);

            // use them as you would like the console.xxx equivalents
            _log('Test for _log()', '----------------------------');
            _info('Test for _dir()', null);
            _info('Test for _info()', {title: 'Untitled', id: 1, author: 'me'});
            _warn('Test for _warn()', 'Nothing will happen');
            _error('Test for _error()', '----------------------------');
        </code></pre>

        <h3><a class="mark" name="inspect">_inspect()</a></h3>

        <p>The <code>_inspect</code> function is a helper function for debug purpose.</p>
        <p>It will return a formatted JSON string version of given object for inspection.</p>
        <p>Functions and special objects might lose in this process.</p>
        <pre class="usage"><code class="language-javascript">
            _inspect(obj) : string
        </code></pre>

        <h4>EXAMPLES</h4>
        <pre class="run-code"><code class="language-javascript">
            var obj = {
                id: 123,
                view: { loaded: true,
                        date: new Date(1467190047725) },
                method: function(){}
            };

            var result = _inspect( obj );
            var expected_result = JSON.stringify({
                "id": 123,
                "view": {
                    "loaded": true,
                    "date": "2016-06-29T08:47:27.725Z"
                },
                "method": "[Function]"
            }, null, 4);
            // the result should looks like expected_result
            ASSERT('_inspect()', result == expected_result);
        </code></pre>

        <h3><a class="mark" name="each">_each()</a></h3>

        <p>A handy replacement to the <code>for(;;)</code> and <code>for...in</code> loop.</p>
        <p>Its syntax is just like <code>Array.forEach()</code> method, but you can use it on Objects and do continue or break
            with a return value.</p>
        <pre><code class="language-javascript">
            _each(object, callback[, this_arg]) : any
            // object    : Array, Object, String or Number to loop
            // callback  : callback function for the loop
            // this_arg  : set the value of 'this' inside the scope

            // extended method for Array and String
            Array._each(callback[, this_arg]) : any
            String._each(callback[, this_arg]) : any

            function callback(value, index, array) {
                return;              // continue to next item in array_or_object
                return any_value;    // break out, and _each() will return any_value
            }
            </code></pre>

        <h4>EXAMPLES</h4>
        <pre class="run-code"><code class="language-javascript">
            var arr = [];

            // ==> Number
            // value: 1 -> 6, index: 0 -> 5
            _each(6, function (value, index) {
                arr[index] = value;
            });
            ASSERT('_each() on number', arr.join() === '1,2,3,4,5,6');

            // ==> String
            // value: a -> c, index: 0 -> 2
            'abc'._each(function (value) {
                arr.push(value);
            });
            ASSERT('_each() on string', arr.join() === '1,2,3,4,5,6,a,b,c');

            // ==> Array
            _each(arr, function (value, index, array) {
                if (value < 4) return;       // continue
                if (value > 5) return true;  // break
                array[index] = value * 10;
            });
            ASSERT('_each() on array', arr.join() === '1,2,3,40,50,6,a,b,c' );

            // return a value
            var chr = arr._each(function (value, index, array) {
                if (typeof value !== 'number')
                    return value;    // return first non-number value
            });
            ASSERT('Array._each() & return value', chr === 'a' );

            // ==> Object
            var list = { action: 'test', animal: 'duck' };
            var my_string = '';
            _each(list, function (value, label) {
                my_string += 'This is a ' + value + '. ';
            });
            ASSERT('_each() on object', my_string === 'This is a test. This is a duck. ' );


        </code></pre>

        <h4>ERROR TESTS</h4>
        <pre class="run-code collapse"><code class="error-test language-javascript">
            // A TypeError will be thrown on invalid parameter types
            // Detailed information can be found in console
            try{
                _each(false, function(){});
                FAIL('_each() paramter 1 error');
            }catch(err){
                ASSERT('_each() paramter 1 error', err instanceof TypeError );
            }
            try{
                _each([1, 2, 3], 'error test 2');
                FAIL('_each() paramter 2 error');
            }catch(err){
                ASSERT('_each() paramter 2 error', err instanceof TypeError );
            }
            </code></pre>


        <h3><a class="mark" name="extend">_extend()</a></h3>

        <p>Extend an object with new properties. This function does not do deep extension.</p>
        <p>And Javscript preserved keywords can not be used or overwritten.</p>
        <pre class="usage"><code class="language-javascript">
            _extend(target, extensions[, overwrite]) : object
            // target     : the target Object or Function you want to extend
            // extensions : an Object contains extensions that will be applied to target
            // overwrite  : whether overwrite existing properties, default is true
        </code></pre>
        <h4>EXAMPLES</h4>
        <pre class="run-code"><code class="language-javascript">
            var point = { x: 1, y: 2 };
            var point_3d = _extend(point, {z: 3});
            ASSERT('_extend()', FLAT(point_3d) === '{"x":1,"y":2,"z":3}' );

            // x will be overwrite
            var point_4d = _extend(point_3d, {x: 10, t: 4});
            ASSERT('_extend() overwrite', FLAT(point_4d) === '{"x":10,"y":2,"z":3,"t":4}' );

            // x & y will not be overwrite
            point_4d = _extend(point_3d, {x: 100, y: 100}, false);
            ASSERT('_extend() no overwrite', FLAT(point_4d) === '{"x":10,"y":2,"z":3,"t":4}' );
        </code></pre>

        <h4>ERROR TESTS</h4>
        <pre class="collapse run-code"><code class="error-test language-javascript">
            // A TypeError will be thrown on invalid parameter types
            // Detailed information can be found in console
            try{
                _extend('error test 1');
                FAIL('_extend() parameter 1 error');
            }catch(err){
                ASSERT('_extend() parameter 1 error', err instanceof TypeError );
            }
            try{
                _extend({}, 'error test 2');
                FAIL('_extend() parameter 2 error');
            }catch(err){
                ASSERT('_extend() parameter 2 error', err instanceof TypeError );
            }
            </code></pre>


        <h3><a class="mark" name="namespace">_namespace()</a></h3>

        <p>Create a namespace and return the object.</p>
        <p>You can't create namespace with Javascript preserved keywords. The result might appear like nothing has happened.</p>
        <pre><code class="language-javascript">
            _namespace(namespace, obj) : object
            // namespace  - a string which represent the namespace path
            // obj        - the object which will be bind to that namespace
        </code></pre>

        <h4>EXAMPLES</h4>
        <pre class="run-code"><code class="language-javascript">
            // just create a blank namespace
            _namespace('my.project');
            ASSERT('_namespace() create blank', FLAT(my.project) === '{}' );

            // add something to it
            var ns_obj = _namespace('my.project.lib', { id: 1, type: 'blank' });
            ASSERT('_namespace() add child', my.project.lib.id === 1);
            ASSERT('_namespace() extension value', ns_obj.type === 'blank');
        </code></pre>

        <h4>ERROR TESTS</h4>
        <pre class="collapse run-code"><code class="error-test language-javascript">
            // A TypeError will be thrown on invalid parameter types
            // Detailed information can be found in console
            try{
                _namespace(['error test', 1]);
                FAIL('_namespace() parameter 1 error');
            }catch(err){
                ASSERT('_namespace() parameter 1 error', err instanceof TypeError);
            }
            try{
                _namespace('ex.test.2', 'error test 2');
                FAIL('_namespace() parameter 2 error');
            }catch(err){
                ASSERT('_namespace() parameter 2 error', err instanceof TypeError);
            }
            </code></pre>

        <hr/>

        <h2><a class="mark" name="message">Message System</a></h2>

        <p>This tiny library includes a basic pseudo message system. Messages are more like remote function calls.</p>
        <p>In order to distinguish from the DOM Event system, it is named _message.</p>
        <p>Though it's not real asynchronize message delivery, it should be enough for most use cases on browser client.</p>

        <h3><a class="mark" name="message-listen">_message.listen()</a></h3>

        <p>Register a message listener.</p>
        <p>There is no unlisten() method, since you can easily drop a message in your message handler by checking internal flag
            (and you definitely will have an internal flag in such case).</p>
        <pre><code class="language-javascript">
            _message.listen(message_name, handler) : _message

            function handler(msg_name, param_1, param_2 ...){ ... }
        </code></pre>

        <h3><a class="mark" name="message-post">_message.post()</a></h3>

        <p>Post a message to listeners.</p>
        <pre><code class="language-javascript">
            _message.post(msg_name, param_1, param_2 ...) : _message
        </code></pre>

        <h3><a class="mark" name="message-post-delayed">_message.postDelayed()</a></h3>

        <p>Post a message to listeners after a specified delay in milliseconds.</p>
        <p>If the same message is triggered again, the delay time will be reset. This behavior is suit for implement Type-n-Search
            like features.</p>
        <pre><code class="language-javascript">
            _message.postDelayed(delay_time, msg_name, param_1, param_2 ...) : _message
        </code></pre>

        <p>All these methods will return the <code>_message</code> object. You can chain methods if required.</p>

        <h4>EXAMPLES</h4>
        <pre class="run-code"><code class="language-javascript">
            var list = [];

            // define the message handler
            function put_in_list(){
                var args = Array.prototype.slice.call(arguments);
                list = list.concat(args);
            }

            // listen to the message
            _message
                .listen('list::add', put_in_list)
                .listen('list::error', function(){ FAIL('_message.post()') });

            // post a message
            _message.post('list::add', 'me', 123);
            // check result
            ASSERT( '_message.post()', FLAT(list) == '["me",123]' );

            // post a delayed message
            _message.postDelayed(1000, 'list::add', 'you', 456);
            // check result after 1 second
            setTimeout(function(){
                ASSERT( '_message.postDelayed()', FLAT(list) == '["me",123,"you",456]' );
            }, 1000);
        </code></pre>

        <h4>ERROR TESTS</h4>
        <pre class="collapse run-code"><code class="error-test language-javascript">
            // A TypeError will be thrown on invalid parameter types
            // Detailed information can be found in console
            try{
                _message.listen(['error test', 1]);
                FAIL('_message.listen() parameter 1 error');
            }catch(err){
                ASSERT('_message.listen() parameter 1 error', err instanceof TypeError );
            }
            try{
                _message.listen('my_msg', 'error test');
                FAIL('_message.listen() parameter 2 error');
            }catch(err){
                ASSERT('_message.listen() parameter 2 error', err instanceof TypeError );
            }

            try{
                _message.post(['error test'], null );
                FAIL('_message.post() parameter 1 error');
            }catch(err){
                ASSERT('_message.post() parameter 1 error', err instanceof TypeError );
            }

            try{
                _message.postDelayed(['error test 1'], null , null );
                FAIL('_message.postDelayed() parameter 1 error');
            }catch(err){
                ASSERT('_message.postDelayed() parameter 1 error', err instanceof TypeError );
            }
            try{
                _message.postDelayed(100, ['error test'], null );
                FAIL('_message.postDelayed() parameter 2 error');
            }catch(err){
                ASSERT('_message.postDelayed() parameter 2 error', err instanceof TypeError );
            }
        </code></pre>

        <hr/>

        <h2><a class="mark" name="route">Route System</a></h2>

        <p>Routes are used to indicate a stateful view by a persistent URL.</p>
        <p>With them you can access or share content directly with an URL, go back &amp; forth with the browser buttons.</p>
        <p>They should not be used for temporary view like a popup dialog or represent an action to execute.</p>
        <p>This is why the route system of Tiny is this simple.</p>
        <p>And for simplicity and compatibility, this router system uses <code>window.location.hash</code> (#string) for routing,
            instead of the fancy History API introduced in HTML5.</p>
        <p>And Tiny provides a predefined View Manager for fast implement of views.</p>

        <h3><a class="mark" name="route-watch">_route.watch()</a></h3>

        <p>Watch a certain route.</p>
        <p>There is no unwatch() method, since you can easily drop a call in your route handler by checking internal flag (and
            you definitely will have an internal flag in such case).</p>
        <p>The <code>route</code> parameter can be a string or a RegExp object.</p>

        <pre><code class="language-javascript">
            _route.watch(route, handler) : _route
            
            function handler(current_route, param_object){ ... }
        </code></pre>
        <p>This method will return <code>_route</code> object, you can chain methods if needed.</p>
        <p>The <code>route</code> parameter can be:</p>
        <ul>
            <li><code>'/'</code> - match <code>''</code> or <code>'/'</code> route only. This is used to implement index view.</li>
            <li><code>'/module'</code> - match any route which starts with a '/module' section.</li>
            <li><code>'module'</code> - match any route which contains a 'module' section. A section must start with '/' or start
                of line, and end with '/' or end of line.</li>
            <li><code>'/search/{keyword}/p{page}'</code> - will match '/search/me/p3' and call handler with {keyword: 'me', page:
                '3'}
            </li>
            <li><code>/item=(.*?),(.*?)/i</code> - use RegExp to match, matched parameters will be returned in an Array.</li>
        </ul>
        <p>The <code>handler</code> function will be called when:</p>
        <ul>
            <li>Current route is a match.</li>
            <li>The route was matched last time, but no match this time.</li>
        </ul>
        <p>This behavior can make view switching easier.</p>
        <p>The <code>current_route</code> parameter of the callback function will be current hash string without starting '#'.</p>
        <p>And the <code>param_object</code> will be <code>true</code> or an <code>Object</code> contains paramters mateched
            in URL. Like:</p>
        <pre><code class="language-javascript">
            // route match
            -> handler('current/route', true);

            // route match and has parameters
            -> handler('current/route/noname/123', {name: 'noname', id: '123'});
        </code></pre>
        <p>If watched route was matched last time but not this time, the <code>param_object</code> will be <code>false</code>.</p>
        <pre><code class="language-javascript">
            // route not match
            -> handler('current/route', false);
        </code></pre>

        <h3><a class="mark" name="route-check">_route.check()</a></h3>

        <p>Check a route string or window.location.hash for route matching. Returns true if match found.</p>
        <p>If you want Tiny to check automatically on window.location.hash changes, please use <code>_route.on()</code>.</p>
        <pre><code class="language-javascript">
            _route.check([route_string]) : boolean
            // route_string : if not given, window.location.hash will be checked
        </code></pre>

        <h4>EXAMPLES</h4>
        <pre class="run-code"><code class="language-javascript">
            var data = [];
            function save_data(route, params){
                data.push(params);
            }

            _route
                .watch('/', function(route, param){ data.push(param ? 1 : 0) })
                .watch('/list', save_data)
                .watch('list/id:{id}', save_data);
            
            // invoke root rule only
            _route.check('');
            ASSERT('_route.check() root', FLAT(data) === '[1]');

            // '/' no match, a false parameter will be sent
            // and match '/list' without parameter
            var result = _route.check('/list/a');
            ASSERT('_route.check() true', result === true);
            ASSERT('data', FLAT(data) === '[1,0,true]');

            // no match, but '/list' matched previously, a false parameter will be sent
            result = _route.check('/id:123');
            ASSERT('_route.check() false', result === false);
            ASSERT('data add false', FLAT(data) === '[1,0,true,false]');

            // no match again, nothing should happen
            result = _route.check('lis');
            ASSERT('_route.check() false again', result === false);
            ASSERT('data no change', FLAT(data) === '[1,0,true,false]');

            // match '/list/id:{id}' and get parameters
            result = _route.check('word/list/id:123');
            ASSERT('_route.check() true again', result === true);
            ASSERT('data change', FLAT(data) === '[1,0,true,false,{"id":"123"}]');

            data = [];
            // match '/list' and '/list/id:{id}'
            result = _route.check('/list/id:456');
            ASSERT('_route.check() must true again', result === true);
            ASSERT('data change again', FLAT(data) === '[true,{"id":"456"}]');

            data = [];
            // no match becuase the section string is 'my_list', not 'list'
            // and previously matched routes will receive false
            result = _route.check('my_list/id:789');
            ASSERT('_route.check() shoule be false', result === false);
            ASSERT('data add 2 false', FLAT(data) === '[false,false]');
        </code></pre>

        <h3><a class="mark" name="route-on">_route.on/off()</a></h3>

        <p>Start or Stop monitoring window.onhashchange event and check current window.location.hash immediately.</p>
        <pre><code class="language-javascript">
            _route.on() : _route
            _route.off() : _route
        </code></pre>

        <h3><a class="mark" name="route-append">_route.append()</a></h3>

        <p>Append sections to route string.</p>
        <pre><code class="language-javascript">
            _route.append(string_or_array[, trigger]) : _route
            // string_or_array : a string or an array of items to append
            // trigger         : whether trigger route change event, default is true
        </code></pre>

        <h3><a class="mark" name="route-remove">_route.remove()</a></h3>

        <p>Remove route string from first occurance of given string.</p>
        <p>Slashes matters:</p>
        <ul>
            <li><code>'key'</code> - /my_key_chain/car_key/key:1' -> '/my_'.</li>
            <li><code>'/key'</code> -'/my_key_chain/car_key/key:1' -> '/my_key_chain/car_key'.</li>
            <li><code>'key/'</code> -'/my_key_chain/car_key/key:1' -> '/my_key_chain/car_'.</li>
            <li><code>'/key/'</code> -'/my_key_chain/key/id:1' -> '/my_key_chain'.</li>
        </ul>
        <pre><code class="language-javascript">
            _route.remove(section[, trigger]) : _route
            // section : from which the route string will be removed
        </code></pre>

        <h4>EXAMPLES</h4>
        <pre class="run-code"><code class="language-javascript">
            var data = [];
            function save_data(route, params){
                data.push(params);
            }

            _route
                .watch('/', function(){ data.push('/') })
                .watch('/books', save_data)
                .watch('books/id:{id}', save_data)
                .watch('books/{id}/{page}', save_data);
            
            // set a test route - no event triggered
            _route.set('/books', false);
            ASSERT('_route.set() no match', FLAT(data) === '[]');

            // start monitoring window.location.hash changes
            _route.on();
            // got a match immediately
            ASSERT('_route.on() match', FLAT(data) === '[true]');

            // add something to current route
            _route.append('id:123');
            ASSERT('_route.get()', _route.get() === '/books/id:123');
            // match '/books' and '/books/id:{id}' with the parameter
            ASSERT('_route.append()', FLAT(data) === '[true,true,{"id":"123"}]');

            // remove the 'id:123' section without trigger the event
            _route.remove('/id:', false);
            ASSERT('_route.get() after cut', _route.get() === '/books');
            // no change to the data
            ASSERT('_route.remove()', FLAT(data) === '[true,true,{"id":"123"}]');

            data = [];
            // send an array to _route.add()
            _route.append([123, 456]);
            ASSERT('_route.append() array', _route.get() === '/books/123/456');
            // '/books' match, 'books/id:{id}' no match, 'books/{id}/{page}' match
            ASSERT('_route.append() result', FLAT(data) === '[true,false,{"id":"123","page":"456"}]');

            // turn off event monitoring
            _route.off();
            // set a new route
            _route.set('my/books/id:789');
            ASSERT('_route.set() result', _route.get() === 'my/books/id:789');
            // no change to the data
            ASSERT('_route.set() array result', FLAT(data) === '[true,false,{"id":"123","page":"456"}]');

            data = [];
            // check window.location.hash
            _route.check();
            // '/books' no match, 'books/id:{id}' match, 'books/{id}/{page}' no match
            ASSERT('_route.on() again', FLAT(data) === '[false,{"id":"789"},false]');
            
            data = [];
            // move to root
            _route.set('/');
            _route.check();
            // '/' match, 'books/id:{id}' no match
            ASSERT('_route.set() to root', FLAT(data) === '["/",false]');
        </code></pre>

        <h4>ERROR TESTS</h4>
        <pre class="collapse run-code"><code class="error-test language-javascript">
            // A TypeError will be thrown on invalid parameter types
            // Detailed information can be found in console
            try{
                _route.watch(null);
                FAIL('_route.watch() paramter 1 error');
            }catch(err){
                ASSERT('_route.watch() paramter 1 error', err instanceof TypeError );
            }
            try{
                _route.watch('/test', null);
                FAIL('_route.watch() paramter 2 error');
            }catch(err){
                ASSERT('_route.watch() paramter 2 error', err instanceof TypeError );
            }

            try{
                _route.check(123);
                FAIL('_route.check() paramter 1 error');
            }catch(err){
                ASSERT('_route.check() paramter 1 error', err instanceof TypeError );
            }

            try{
                _route.append(null);
                FAIL('_route.append() paramter 1 error');
            }catch(err){
                ASSERT('_route.append() paramter 1 error', err instanceof TypeError );
            }

            try{
                _route.remove(null);
                FAIL('_route.remove() paramter 1 error');
            }catch(err){
                ASSERT('_route.remove() paramter 1 error', err instanceof TypeError );
            }
            </code></pre>

        <hr/>

        <h2><a class="mark" name="storage-func">Local Storage</a></h2>

        <h3><a class="mark" name="storage">_storage()</a></h3>

        <p>A handy function for accessing <code>window.localStorage</code>.</p>
        <p>Integer, Boolean, Array, Date & Object types will be automatically converted on access.</p>
        <p>Note: All local pages might share a same localStorage store in some browsers. You can use <code>keyPrefix</code>            to avoid collisions.</p>
        <pre><code class="language-javascript">
            // filter keys by prefix, default is ''
            tiny.storage.keyPrefix = 'your_prefix';

            _storage()            // return all values as an Object
            _storage(key)         // get value by key
            _storage(key, value)  // set value by key
            _storage(key, null)   // delete item of given key
            _storage(null, null)  // delete all contents

            // or send an object for batch operations
            _storage({
                key1: value1,
                key2: null,
                ...
            })
        </code></pre>

        <h4>EXAMPLES</h4>
        <pre class="run-code"><code class="language-javascript">
            // write a value
            _storage('test', false);
            ASSERT('_storage() no prefix', _storage('test') === false);

            // set a prefix
            tiny.storage.keyPrefix = 'tiny_lib';

            // should not be able to read from previous key
            ASSERT('_storage() with prefix', _storage('test') === undefined);

            // write value - with prefix
            _storage('test', true);
            _storage('num', 123);
            _storage('array', [4, 5, 6]);
            _storage('date', new Date(1467190047725));
            _storage('object', {x:1, y:2});

            // read - with prefix
            ASSERT('_storage() 1', _storage('test') === true);
            ASSERT('_storage() 2', _storage('num') === 123);
            ASSERT('_storage() 3', FLAT(_storage('array')) === '[4,5,6]');
            ASSERT('_storage() 4', FLAT(_storage('date')) === '"2016-06-29T08:47:27.725Z"');
            ASSERT('_storage() 5', FLAT(_storage('object')) === '{"x":1,"y":2}');

            // read all - with prefix
            var data = _storage();
            ASSERT('_storage() all 1', data.test === true);
            ASSERT('_storage() all 2', data.num === 123);
            ASSERT('_storage() all 3', FLAT(data.array) === '[4,5,6]');
            ASSERT('_storage() all 4', FLAT(data.date) === '"2016-06-29T08:47:27.725Z"');
            ASSERT('_storage() all 5', FLAT(data.object) === '{"x":1,"y":2}');

            // delete - with prefix
            _storage('date', null);
            ASSERT('_storage() delete', _storage('date') === undefined);

            // batch operation
            _storage({
                bool: false,    // add
                num: 789,       // modify
                array: null     // delete
            });
            ASSERT('_storage() batch 1', _storage('bool') === false);
            ASSERT('_storage() batch 2', _storage('num') === 789);
            ASSERT('_storage() batch 3', _storage('array') === undefined);

            // delete all - with prefix
            _storage(null, null);
            ASSERT('_storage() delete all', FLAT(_storage()) === '{}');

            tiny.storage.keyPrefix = '';
            // previous value with no prefix should still there
            ASSERT('_storage() no prefix value', _storage('test') === false);
        </code></pre>

        <h4>ERROR TESTS</h4>
        <pre class="collapse run-code"><code class="error-test language-javascript">
            // A TypeError will be thrown on invalid parameter types
            // Detailed information can be found in console
            try{
                _storage(123);
                FAIL('_storage() paramter 1 error');
            }catch(err){
                ASSERT('_storage() paramter 1 error', err instanceof TypeError );
            }
        </code></pre>


        <h2><a class="mark" name="format-func">Format &amp; Template</a></h2>

        <h3><a class="mark" name="html-safe">_htmlSafe()</a></h3>
        <p>Make a string HTML-safe.</p>
        <pre><code class="language-javascript">
            _htmlSafe(str [, keep_spaces]);

            String._htmlSafe([keep_spaces]);
        </code></pre>

        <h4>EXAMPLES</h4>
        <pre class="run-code"><code class="language-javascript">
            var txt = 'task:\n  >> done';

            ASSERT('1', _htmlSafe(txt) === 'task:&lt;br/&gt;  &amp;gt;&amp;gt; done');
            ASSERT('2', txt._htmlSafe() === 'task:&lt;br/&gt;  &amp;gt;&amp;gt; done');

            // keep white spaces in html
            ASSERT('3', _htmlSafe(txt, true) === 'task:&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;gt;&amp;gt;&amp;nbsp;done');
            ASSERT('4', txt._htmlSafe(true) === 'task:&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;gt;&amp;gt;&amp;nbsp;done');
        </code></pre>

        <h4>ERROR TESTS</h4>
        <pre class="collapse run-code"><code class="error-test language-javascript">
            // A TypeError will be thrown on invalid parameter types
            // Detailed information can be found in console
            try{
                _htmlSafe(123);
                FAIL('_htmlSafe() paramter 1 error');
            }catch(err){
                ASSERT('_htmlSafe() paramter 1 error', err instanceof TypeError );
            }
        </code></pre>

        <h3><a class="mark" name="format-number">_formatNumber()</a></h3>

        <p>Number format function.</p>
        <pre><code class="language-javascript">
            _formatNumber(num[, format]);
            
            Number._format([format]);
        </code></pre>

        <h4>EXAMPLES</h4>
        <pre class="run-code"><code class="language-javascript">
            var num = 123456.789;
            ASSERT('1', num._format() == '123456.789');
            ASSERT('2', num._format('.') == '123457'); // round to point
            ASSERT('3', num._format('.00') == '123456.79');
            ASSERT('4', num._format(',') == '123,456.789');
            ASSERT('5', num._format(',.00') == '123,456.79');
            ASSERT('6', num._format(',.00%') == '12,345,678.90%');
            ASSERT('7', num._format('hex') == '1e240.c9fbe76c9');
            ASSERT('8', num._format('HEX.') == '1E241'); // uppercase & rounded
            ASSERT('9', num._format('HEX.00') == '1E240.C9');
        </code></pre>

        <h4>ERROR TESTS</h4>
        <pre class="collapse run-code"><code class="error-test language-javascript">
            // A TypeError will be thrown on invalid parameter types
            // Detailed information can be found in console
            try{
                _formatNumber('123');
                FAIL('_formatNumber() paramter 1 error');
            }catch(err){
                ASSERT('_formatNumber() paramter 1 error', err instanceof TypeError );
            }
            try{
                _formatNumber(123, 456);
                FAIL('_formatNumber() paramter 2 error');
            }catch(err){
                ASSERT('_formatNumber() paramter 2 error', err instanceof TypeError );
            }
        </code></pre>

        <h3><a class="mark" name="format-date">_formatDate()</a></h3>

        <p>Date format function.</p>
        <pre><code class="language-javascript">
            // you can use localized date names by replacing this data object
            _format.dateNames = {
                day: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                dayAbbr: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
                month: ['January', 'February', 'March', 'April', 'May', 'June', 'July',
                    'August', 'September', 'October', 'November', 'December'],
                monthAbbr: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                ap: ['AM', 'PM']
            };

            // and set default format
            _format.defaultDateFormat = 'datetime';
            // 'datetime' => '2005-06-07 08:09:10'
            // 'date'     => '2005-06-07' // yyyy-MM-dd
            // 'time'     => '08:09:10'   // HH:mm:ss
            // 'iso'      => '2005-06-07T00:09:10.753Z' // ISO 8601

            // call the function
            _formatDate(date[, format]);

            // or use extended method
            Date._format([format]);

            // FORMAT STRING CODES:
            // Text inside [] will be kept: '[yyyy]-M-d' => 'yyyy-6-7'
            // 'yyyy' = 2009,  'yy' = 09,    'y' = 9         // Year
            // 'M'    = 6,     'MM' = 06                     // Numeric month
            // 'MMM'  = Jun,   'MMMM' = June                 // Month name
            // 'd'    = 7,     'dd' = 07                     // Day of the month
            // 'D'    = Tue,   'DD' = Tuesday                // Day of the week
            // 'h'    = 8,     'hh' = 08                     // 12 Hour clock
            // 'H'    = 8,     'HH' = 08                     // 24 Hour clock 
            // 'm'    = 9,     'mm' = 09                     // Minutes
            // 's'    = 10,    'ss' = 10,     'sss' = 753    // Seconds & Milliseconds
            // 'z'    = +08,   'zz' = +0800,  'ZZ' = +08:00  // Timezone
            // 't'    = AM,    // AM / PM
        </code></pre>

        <h4>EXAMPLES</h4>
        <pre class="run-code"><code class="language-javascript">
            var d = new Date(1118102950753);
            ASSERT('0', d._format() === '2005-06-07 08:09:10');
            ASSERT('1', d._format('datetime') === '2005-06-07 08:09:10');
            ASSERT('2', d._format('date') == '2005-06-07');
            ASSERT('3', d._format('time') == '08:09:10');
            ASSERT('4', d._format('iso') == '2005-06-07T00:09:10.753Z');

            // also accept date number from Date.getTime()
            // text inside [] will be kept
            ASSERT('5',  _formatDate(1118102950753, '[Today is] DD') == 'Today is Tuesday');
            
            // mix token and text
            ASSERT('6', d._format('D, d MMM yyyy H:m:s [GMT]zz') == 'Tue, 7 Jun 2005 8:9:10 GMT+0800');
        </code></pre>

        <h4>ERROR TESTS</h4>
        <pre class="collapse run-code"><code class="error-test language-javascript">
            // A TypeError will be thrown on invalid parameter types
            // Detailed information can be found in console
            try{
                _formatDate('123');
                FAIL('_formatDate() paramter 1 error');
            }catch(err){
                ASSERT('_formatDate() paramter 1 error', err instanceof TypeError );
            }
            try{
                _formatDate(new Date(), 456);
                FAIL('_formatDate() paramter 2 error');
            }catch(err){
                ASSERT('_formatDate() paramter 2 error', err instanceof TypeError );
            }
        </code></pre>

        <h3><a class="mark" name="format-format">_format()</a></h3>

        <p>Template format function.</p>
        <p>This function support both the full html template and the shorthand template.</p>
        <p>Expanded shorthand templates will be cached for better performance.</p>
        <pre><code class="language-javascript">
            _format(template, data_object);
            // template    : the template string
            // data_object : an object contains data you want to fill into the template

            String._format(data_object);

            // format html template string
            _format('&lt;span class="date-tag">Today is {date}&lt;/span>', {date: new Date()});
            // format shorthand template string (starts with '...')
            _format('span.date-tag :Today is {date}', new Date());
            // get template for HTML tag with id 'date-tag-template'
            '#date-tag-template'._format(obj_date);

            /*
            >> Template Token format for value fill-in
                {index}      : refer to data_object[index] item by index
                {key}        : refer to data_object[key] property by key
                {key|format} : set format string for data_object[key]
                {}           : fill with whole object, format with default style
                {|format}    : fill with whole object with given 'format' string
                {(any text)} : contents inside brackets will be output directly
                {{           : output { char
                }}           : output } char
            
            >> Special Formats
                {key|!html} : don't encode special html chars
                {$key}      : refer to a language string by calling _t(key)
                {key|5}     : output first 5 chars from beginning
                {key|5.}    : output first 5 chars and add ... at end
                {key|-5}    : output last 5 chars from ending
                {key|-5.}   : output last 5 chars and add ... at beginning
            
            >> Conditional Block
                {?key}        : Show block if data_object[key] is not empty or false, 
                                and if it is an Array, loop throught it to build a list
                    {subkey}  : Tokens inside block will be filled with data_object[key][subkey]
                {/?key}
                
                {^key}           : Show block if data_object[key] is empty or false
                    {other_key}	 : Tokens inside block will be filled with data_object[other_key]
                {/^key}
                
            >> Reference to template
                {#template-id}   : refer to a template block inside html file with id

            >> Shorthand Template Syntax
                ...   : always starts with three dots mark
                tag   : start a tag with tag name, DIV can be ommitted
                #     : mark start of an ID
                .     : mark start of a class
                :     : all string between this mark to next newline char will be treated as tag content
                >     : indicate an inline nested indent (won't work after ':' mark)
            
            */
        </code></pre>

        <h4>EXAMPLES - SIMPLE FORMAT</h4>
        <pre class="run-code"><code class="language-javascript">
            // use whole data object and format with 'DD'
            var result = _format('Today is {|DD}.', new Date(1118102950753));
            ASSERT('date', result === 'Today is Tuesday.');
            
            // cut long string
            var str = 'This is a very very loooooooong string';
            result = 'It says: "{|14.}"'._format(str);
            ASSERT('cut end', result === 'It says: "This is a very..."');
            result = 'It says: "{|-14.}"'._format(str);
            ASSERT('cut start', result === 'It says: "...ooooong string"');

            // keep {}
            result = 'Use {{token}} to fill value {token}'._format({token: 123});
            ASSERT('keep {}', result === 'Use {token} to fill value 123');

            // output text directly
            result = '{(Output {token} or any text)}'._format({token: 123});
            ASSERT('{(output text)}', result === 'Output {token} or any text');

            var my_items = {
                book: { price: 1299.99,
                        name: "my book" }
            };
            // refer to a sub key of data object
            result = 'The price is {book.price|,}'._format(my_items);
            ASSERT('sub key', result === 'The price is 1,299.99');

            var arr = [10, 20, 30];
            // array index - starts at 0
            result = 'Refer to {1}'._format(arr);
            ASSERT('array index', result === 'Refer to 20');

            // special chars will be escaped
            result = 'Click {}'._format('&lt;a href="#">HERE&lt;/a>');
            ASSERT('escape html', result === 'Click &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;HERE&amp;lt;/a&amp;gt;');
            // don't escape
            result = 'Click {|!html}'._format('&lt;a href="#">HERE&lt;/a>');
            ASSERT('keep html', result === 'Click &lt;a href="#">HERE&lt;/a>');
        </code></pre>

        <h4>EXAMPLES - SHORTHAND TEMPLATE</h4>
        <pre class="run-code"><code class="language-javascript">
            var data = {
                id: 123456,
                title: 'Plan A & B',
                tasks: 7,
                people: 9
            };

            // shorthand template is short and clear
            var template = '... li.item[id={id}] > .title :{title}';
            var result = template._format(data);
            ASSERT('inline shorthand 1',
                result ===
                '&lt;li class="item" id="123456">\n' +
                ' &lt;div class="title">Plan A &amp;amp; B&lt;/div>\n' +
                '&lt;/li>\n');
            
            // complex shorthand template - indents and end-of-lines '\n' are important
            template = '...' +
                'li.item[id={id}]\n'+
                '  .title :{title}\n' +
                '  .tags :{tasks} TASKS &lt;i>/&lt;/i> {people} PEOPLE\n';

            // format without data - returns template
            result = template._format();
            ASSERT('shorthand -> html template',
                result ===
                '&lt;li class="item" id="{id}">\n' +
                '  &lt;div class="title">{title}&lt;/div>\n' +
                '  &lt;div class="tags">{tasks} TASKS &lt;i>/&lt;/i> {people} PEOPLE&lt;/div>\n' +
                '&lt;/li>\n');

            // fill in data
            result = result._format(data);
            ASSERT('html template -> output',
                result ===
                '&lt;li class="item" id="123456">\n' +
                '  &lt;div class="title">Plan A &amp;amp; B&lt;/div>\n' +
                '  &lt;div class="tags">7 TASKS &lt;i>/&lt;/i> 9 PEOPLE&lt;/div>\n' +
                '&lt;/li>\n');
        </code></pre>
        
        <h4>EXAMPLES - TEMPLATES INSIDE HTML FILE</h4>
        <pre class="run-code html"><code class="language-html">
            &lt;!--
            ****** HTML FILE ******
            Template strings must be placed inside &lt;script> tag to keep indents and tags
            -->

            &lt;!-- HTML Template in HTML File -->
            &lt;script type="text/x-template" id="tpl-html-block">
                &lt;div class="content">
                    &lt;h2>
                        &lt;a href="#/project/{id}">
                            &lt;img src="img/project.png"/>
                            Plan List of {project}
                        &lt;/a>
                    &lt;/h2>
                    &lt;ul class="plan-list">
                        {?plans}
                            {#tpl-sh-li} &lt;!-- refer to another template below -->
                        {/?plans}
                    &lt;/ul>
                &lt;/div>
            &lt;/script>

            &lt;!-- Shorthand Equilavent of above -->
            &lt;!--
                Indents are important in shorthand templates
                a tab is count as one indent, and don't mix tabs and spaces
                and conditional {} tokens should start with : to output as text
            -->
            &lt;script type="text/x-template" id="tpl-sh-block">
            ...
            .content
                h2
                    a [href=#/project/{id}]
                        img [src=img/project.png]
                        :Plan List of {project}
                ul .plan-list
                    :{?plans}
                        :{#tpl-sh-li}
                    :{/?plans}
            &lt;/script>

            &lt;!-- List item template -->
            &lt;script type="text/x-template" id="tpl-sh-li">
            ...
            li .item [id={id}]
                .title :{title}
                .tags :{plans} TASKS &lt;i>/&lt;/i> {people} PEOPLE
            &lt;/script>
        </code></pre>
        <pre class="run-code"><code class="language-javascript">
        /****** Javascript File ******/
        var result = _format('#tpl-sh-block');
        ASSERT('sh -> html',
            result ===
            '&lt;div class="content">\n'+
            '    &lt;h2>\n'+
            '        &lt;a href="#/project/{id}">\n'+
            '            &lt;img src="img/project.png"/>\n'+
            '            Plan List of {project}\n'+
            '        &lt;/a>\n'+
            '    &lt;/h2>\n'+
            '    &lt;ul class="plan-list">\n'+
            '        {?plans}\n'+
            '            {#tpl-sh-li}\n'+
            '        {/?plans}\n'+
            '    &lt;/ul>\n'+
            '&lt;/div>\n');
        </code></pre>

    </div>
</body>

</html>