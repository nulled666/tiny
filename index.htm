<html>

<head>
    <title>The Tiny Library</title>
    <link href="lib/prism.css" rel="stylesheet">
    <link href="index.css" rel="stylesheet">
    <script type="text/javascript" src="lib/jquery-3.0.0.min.js"></script>
    <script type="text/javascript" src="lib/prism.js"></script>
    <script type="text/javascript" src="tiny.js"></script>
    <script type="text/javascript" src="index.js"></script>
</head>

<body>
    <div class="sidebar">
        <div id="content-table" class="content-table">
        </div>
    </div>
    <div id="content-block" class="content">
        <div id="test-info" class="test-info">
            CODE TEST
        </div>

        <h1>The Tiny Function Library</h1>

        <h2><a class="mark" name="">Introduction</a></h2>

        <p>This small library is meant to provide some handy functions which are missing in DOM manipulating frameworks like
            jQuery or others.</p>
        <p>And it doesn't want to be another armed-to-teeth full featured framework (might also be hard-to-learn).</p>
        <p>Its goal is providing a minimalist building foundation for modern App-like web pages.</p>

        <h3><a class="mark" name="import">tiny.import()</a></h3>

        <p>By default, Tiny will not inject global functions and object methods used in below examples into global namespace
            (the <code>window</code> object).</p>
        <p>To use those short function names, pleas call <code>tiny.import()</code> ahead of all calls.</p>
        <pre><code class="run-code language-javascript">
           tiny.import();  // register global function names for tiny methods
        </code></pre>

        <h3><a class="mark" name="show-me">tiny.me()</a></h3>

        <p>Show a structural overview of <code>tiny</code> namespace. This function will also show a list injected global functions.</p>
        <pre><code class="run-code language-javascript">
           tiny.me();  // show tiny definitions in console
        </code></pre>

        <hr/>

        <h2><a class="mark" name="basic-functions">Base Functions</a></h2>

        <h3><a class="mark" name="console-shorthands">_log(), _dir(), ... _error()</a></h3>

        <p>Tiny provides several shorthands to console methods: <code>_log()</code>, <code>_dir()</code>, <code>_info()</code>,
            <code>_warn()</code> and <code>_error()</code>.</p>
        <p>You might use these functions just like the original methods of <code>console</code>. These are not wrapper functions,
            and will not show the wrapper function name &amp; location in the console output.</p>
        <pre class="usage"><code class="language-javascript">
            tiny.verbose(true);        // enable log output

            _log(param1, param2, ...);  // == console.log(param1, param2)
        </code></pre>
        <p>By default, output of <code>_log()</code> &amp; <code>_dir()</code> is turned off. Don't bother end users with verbose
            logs.
        </p>
        <p>You can easily turn the console log on or off by calling <code>tiny.verbose(true)</code> in develop or production
            environments.
        </p>

        <h4>EXAMPLES</h4>
        <pre><code class="run-code language-javascript">
            // enable _log() output when you need them
            tiny.verbose(true);

            // use them as you would like the console.xxx equivalents
            _log('Test for _log()', '----------------------------');
            _info('Test for _dir()', null);
            _info('Test for _info()', {title: 'Untitled', id: 1, author: 'me'});
            _warn('Test for _warn()', 'Nothing will happen');
            _error('Test for _error()', '----------------------------');
        </code></pre>

        <h3><a class="mark" name="inspect">_inspect()</a></h3>

        <p>The <code>_inspect</code> function is a helper function for debug purpose.</p>
        <p>It will return a formatted JSON string version of given object for inspection.</p>
        <p>Functions and special objects might lose in this process.</p>
        <pre class="usage"><code class="language-javascript">
            _inspect(obj) : string
        </code></pre>

        <h4>EXAMPLES</h4>
        <pre><code class="run-code language-javascript">
            var obj = {
                id: 123,
                view: { loaded: true,
                        date: new Date(1467190047725) },
                method: function(){}
            };

            var result = _inspect( obj );
            var expected_result = JSON.stringify({
                "id": 123,
                "view": {
                    "loaded": true,
                    "date": "2016-06-29T08:47:27.725Z"
                },
                "method": "[Function]"
            }, null, 4);
            // the result should looks like expected_result
            ASSERT('_inspect()', result == expected_result);
        </code></pre>

        <hr/>

        <h3><a class="mark" name="each">_each()</a></h3>

        <p>A handy replacement to the <code>for(;;)</code> and <code>for...in</code> loop.</p>
        <p>Its syntax is just like <code>Array.forEach()</code> method, but you can use it on Objects and do continue or break
            with a return value.</p>
        <p>If you called <code>tiny.import()</code>, an method named <code>Array._each()</code> will be available.</p>
        <pre class="usage"><code class="language-javascript">
            _each(array_or_object, callback[, this_arg]) : any
            // array_or_object : Array or Object to loop
            // callback        : callback function for the loop
            // this_arg        : set the value of 'this' inside the scope

            function callback(value, index, array) {
                return;              // continue to next item in array_or_object
                return any_value;    // break out, and _each() will return any_value
            }

            // extended method for Array
            Array._each(callback[, this_arg]) : any
            </code></pre>

        <h4>EXAMPLES</h4>
        <pre><code class="run-code language-javascript">
            //==== Work with Array ================
            var numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];
            _each(numbers, function (value, index, array) {
                if (value < 4) return;       // continue
                if (value > 6) return true;  // break
                array[index] = value * 10;
            });
            ASSERT('_each() on array', numbers.join() === '1,2,3,40,50,60,7,8,9' );

            // you can get returned value like this
            var big = numbers._each(function (value, index, array) {
                if (value > 10)
                    return value;  // return first number bigger than 10
            });
            ASSERT('Array._each() & return value', big === 40 );

            //==== Work with Object ================
            var list = { book: 'book', pen: 'pen' };
            var my_string = '';
            _each(list, function (value, label) {
                my_string += 'It\'s my ' + value + '. ';
            });
            ASSERT('_each() on object', my_string === 'It\'s my book. It\'s my pen. ' );
        </code></pre>

        <h4>ERROR TESTS</h4>
        <pre class="collapse"><code class="error-test run-code language-javascript">
            // A TypeError will be thrown on invalid parameter types
            // Detailed information can be found in console
            try{
                _each('error test 1');
                FAIL('_each() paramter 1 error');
            }catch(err){
                ASSERT('_each() paramter 1 error', err instanceof TypeError );
            }
            try{
                _each([1, 2, 3], 'error test 2');
                FAIL('_each() paramter 2 error');
            }catch(err){
                ASSERT('_each() paramter 2 error', err instanceof TypeError );
            }
            </code></pre>

        <hr/>

        <h3><a class="mark" name="extend">_extend()</a></h3>

        <p>Extend an object with new properties. This function does not do deep extension.</p>
        <p>And Javscript preserved keywords can not be used or overwritten.</p>
        <pre class="usage"><code class="language-javascript">
            _extend(target, extensions[, overwrite]) : object
            // target     : the target Object or Function you want to extend
            // extensions : an Object contains extensions that will be applied to target
            // overwrite  : whether overwrite existing properties, default is true
        </code></pre>
        <h4>EXAMPLES</h4>
        <pre><code class="run-code language-javascript">
            var point = { x: 1, y: 2 };
            var point_3d = _extend(point, {z: 3});
            ASSERT('_extend()', FLAT(point_3d) === '{"x":1,"y":2,"z":3}' );

            // x will be overwrite
            var point_4d = _extend(point_3d, {x: 10, t: 4});
            ASSERT('_extend() overwrite', FLAT(point_4d) === '{"x":10,"y":2,"z":3,"t":4}' );

            // x & y will not be overwrite
            point_4d = _extend(point_3d, {x: 100, y: 100}, false);
            ASSERT('_extend() no overwrite', FLAT(point_4d) === '{"x":10,"y":2,"z":3,"t":4}' );
        </code></pre>

        <h4>ERROR TESTS</h4>
        <pre class="collapse"><code class="error-test run-code language-javascript">
            // A TypeError will be thrown on invalid parameter types
            // Detailed information can be found in console
            try{
                _extend('error test 1');
                FAIL('_extend() parameter 1 error');
            }catch(err){
                ASSERT('_extend() parameter 1 error', err instanceof TypeError );
            }
            try{
                _extend({}, 'error test 2');
                FAIL('_extend() parameter 2 error');
            }catch(err){
                ASSERT('_extend() parameter 2 error', err instanceof TypeError );
            }
            </code></pre>

        <hr/>

        <h3><a class="mark" name="namespace">_namespace()</a></h3>

        <p>Create a namespace and return the object.</p>
        <p>You can't create namespace with Javascript preserved keywords. The result might appear like nothing has happened.</p>
        <pre class="usage"><code class="language-javascript">
            _namespace(namespace, obj) : object
            // namespace  - a string which represent the namespace path
            // obj        - the object which will be bind to that namespace
        </code></pre>

        <h4>EXAMPLES</h4>
        <pre><code class="run-code language-javascript">
            // just create a blank namespace
            _namespace('my.project');
            ASSERT('_namespace() create blank', FLAT(my.project) === '{}' );

            // add something to it
            var ns_obj = _namespace('my.project.lib', { id: 1, type: 'blank' });
            ASSERT('_namespace() add child', my.project.lib.id === 1);
            ASSERT('_namespace() extension value', ns_obj.type === 'blank');
        </code></pre>

        <h4>ERROR TESTS</h4>
        <pre class="collapse"><code class="error-test run-code language-javascript">
            // A TypeError will be thrown on invalid parameter types
            // Detailed information can be found in console
            try{
                _namespace(['error test', 1]);
                FAIL('_namespace() parameter 1 error');
            }catch(err){
                ASSERT('_namespace() parameter 1 error', err instanceof TypeError);
            }
            try{
                _namespace('ex.test.2', 'error test 2');
                FAIL('_namespace() parameter 2 error');
            }catch(err){
                ASSERT('_namespace() parameter 2 error', err instanceof TypeError);
            }
            </code></pre>

        <hr/>

        <h2><a class="mark" name="message">Message System</a></h2>

        <p>This tiny library includes a basic pseudo message system. Messages are more like remote function calls.</p>
        <p>In order to distinguish from the DOM Event system, it is named _message.</p>
        <p>Though it's not real asynchronize message delivery, it should be enough for most use cases on browser client.</p>

        <h3><a class="mark" name="message-listen">_message.listen()</a></h3>

        <p>Register a message listener.</p>
        <p>There is no unlisten() method, since you can easily drop a message in your message handler by checking internal flag
            (and you definitely will have an internal flag in such case).</p>
        <pre class="usage"><code class="language-javascript">
            _message.listen(message_name, handler) : _message

            function handler(msg_name, param_1, param_2 ...){ ... }
        </code></pre>

        <h3><a class="mark" name="message-post">_message.post()</a></h3>

        <p>Post a message to listeners.</p>
        <pre class="usage"><code class="language-javascript">
            _message.post(msg_name, param_1, param_2 ...) : _message
        </code></pre>

        <h3><a class="mark" name="message-post-delayed">_message.postDelayed()</a></h3>

        <p>Post a message to listeners after a specified delay in milliseconds.</p>
        <p>If the same message is triggered again, the delay time will be reset. This behavior is suit for implement Type-n-Search
            like features.</p>
        <pre class="usage"><code class="language-javascript">
            _message.postDelayed(delay_time, msg_name, param_1, param_2 ...) : _message
        </code></pre>

        <p>All these methods will return the <code>_message</code> object. You can chain methods if required.</p>

        <h4>EXAMPLES</h4>
        <pre><code class="run-code language-javascript">
            var list = [];

            // define the message handler
            function put_in_list(){
                var args = Array.prototype.slice.call(arguments);
                list = list.concat(args);
            }

            // listen to the message
            _message
                .listen('list::add', put_in_list)
                .listen('list::error', function(){ FAIL('_message.post()') });

            // post a message
            _message.post('list::add', 'me', 123);
            // check result
            ASSERT( '_message.post()', FLAT(list) == '["me",123]' );

            // post a delayed message
            _message.postDelayed(1000, 'list::add', 'you', 456);
            // check result after 1 second
            setTimeout(function(){
                ASSERT( '_message.postDelayed()', FLAT(list) == '["me",123,"you",456]' );
            }, 1000);
        </code></pre>

        <h4>ERROR TESTS</h4>
        <pre class="collapse"><code class="error-test run-code language-javascript">
            // A TypeError will be thrown on invalid parameter types
            // Detailed information can be found in console
            try{
                _message.listen(['error test', 1]);
                FAIL('_message.listen() parameter 1 error');
            }catch(err){
                ASSERT('_message.listen() parameter 1 error', err instanceof TypeError );
            }
            try{
                _message.listen('my_msg', 'error test');
                FAIL('_message.listen() parameter 2 error');
            }catch(err){
                ASSERT('_message.listen() parameter 2 error', err instanceof TypeError );
            }

            try{
                _message.post(['error test'], null );
                FAIL('_message.post() parameter 1 error');
            }catch(err){
                ASSERT('_message.post() parameter 1 error', err instanceof TypeError );
            }

            try{
                _message.postDelayed(['error test 1'], null , null );
                FAIL('_message.postDelayed() parameter 1 error');
            }catch(err){
                ASSERT('_message.postDelayed() parameter 1 error', err instanceof TypeError );
            }
            try{
                _message.postDelayed(100, ['error test'], null );
                FAIL('_message.postDelayed() parameter 2 error');
            }catch(err){
                ASSERT('_message.postDelayed() parameter 2 error', err instanceof TypeError );
            }
        </code></pre>

        <hr/>

        <h2><a class="mark" name="route">Route System</a></h2>

        <p>Routes are used to indicate a stateful view by a persistent URL.</p>
        <p>With them you can access or share content directly with an URL, go back &amp; forth with the browser buttons.</p>
        <p>They should not be used for temporary view like a popup dialog or represent an action to execute.</p>
        <p>This is why the route system of Tiny is this simple.</p>
        <p>And for simplicity and compatibility, this router system uses <code>window.location.hash</code> (#string) for routing,
            instead of the fancy History API introduced in HTML5.</p>
        <p>And Tiny provides a predefined View Manager for fast implement of views.</p>

        <h3><a class="mark" name="route-watch">_route.watch()</a></h3>

        <p>Watch a certain route.</p>
        <p>There is no unwatch() method, since you can easily drop a call in your route handler by checking internal flag (and
            you definitely will have an internal flag in such case).</p>
        <p>The <code>route</code> parameter can be a string or a RegExp object.</p>

        <pre class="usage"><code class="language-javascript">
            _route.watch(route, handler) : _route
            
            function handler(current_route, param_object){ ... }
        </code></pre>
        <p>This method will return <code>_route</code> object, you can chain methods if needed.</p>
        <p>The <code>route</code> parameter can be:</p>
        <ul>
            <li><code>'/'</code> - match <code>''</code> or <code>'/'</code> route only. This is used to implement index view.</li>
            <li><code>'/module'</code> - match any route which starts with a '/module' section.</li>
            <li><code>'module'</code> - match any route which contains a 'module' section. A section must start with '/' or start
                of line, and end with '/' or end of line.</li>
            <li><code>'/search/{keyword}/p{page}'</code> - will match '/search/me/p3' and call handler with {keyword: 'me', page:
                '3'}
            </li>
            <li><code>/item=(.*?),(.*?)/i</code> - use RegExp to match, matched parameters will be returned in an Array.</li>
        </ul>
        <p>The <code>handler</code> function will be called when:</p>
        <ul>
            <li>Current route is a match.</li>
            <li>The route was matched last time, but no match this time.</li>
        </ul>
        <p>This behavior can make view switching easier.</p>
        <p>The <code>current_route</code> parameter of the callback function will be current hash string without starting '#'.</p>
        <p>And the <code>param_object</code> will be <code>true</code> or an <code>Object</code> contains paramters mateched
            in URL. Like:</p>
        <pre class="usage"><code class="language-javascript">
            // route match
            -> handler('current/route', true);

            // route match and has parameters
            -> handler('current/route/noname/123', {name: 'noname', id: '123'});
        </code></pre>
        <p>If watched route was matched last time but not this time, the <code>param_object</code> will be <code>false</code>.</p>
        <pre class="usage"><code class="language-javascript">
            // route not match
            -> handler('current/route', false);
        </code></pre>

        <h3><a class="mark" name="route-check">_route.check()</a></h3>

        <p>Check a route string or window.location.hash for route matching. Returns true if match found.</p>
        <p>If you want Tiny to check automatically on window.location.hash changes, please use <code>_route.on()</code>.</p>
        <pre class="usage"><code class="language-javascript">
            _route.check([route_string]) : boolean
            // route_string : if not given, window.location.hash will be checked
        </code></pre>

        <h4>EXAMPLES</h4>
        <pre><code class="run-code language-javascript">
            var data = [];
            function save_data(route, params){
                data.push(params);
            }

            _route
                .watch('/', function(route, param){ data.push('*') })
                .watch('/list', save_data)
                .watch('list/id:{id}', save_data);
            
            // invoke root rule only
            _route.check('');
            ASSERT('_route.check() root', FLAT(data) === '["*"]');

            // match '/list' and no parameter
            var result = _route.check('/list/a');
            ASSERT('_route.check() true', result === true);
            ASSERT('data', FLAT(data) === '["*",true]');

            // no match, but previous matched, a false parameter will be sent
            result = _route.check('/id:123');
            ASSERT('_route.check() false', result === false);
            ASSERT('data add false', FLAT(data) === '["*",true,false]');

            // no match again, nothing should happen
            result = _route.check('lis');
            ASSERT('_route.check() false again', result === false);
            ASSERT('data no change', FLAT(data) === '["*",true,false]');

            // match '/list/id:{id}' and get parameters
            result = _route.check('word/list/id:123');
            ASSERT('_route.check() true again', result === true);
            ASSERT('data change', FLAT(data) === '["*",true,false,{"id":"123"}]');

            data = [];
            // match '/list' and '/list/id:{id}'
            result = _route.check('/list/id:456');
            ASSERT('_route.check() must true again', result === true);
            ASSERT('data change again', FLAT(data) === '[true,{"id":"456"}]');

            data = [];
            // no match becuase the section string is 'my_list', not 'list'
            // and previously matched routes will receive false
            result = _route.check('my_list/id:789');
            ASSERT('_route.check() shoule be false', result === false);
            ASSERT('data add 2 false', FLAT(data) === '[false,false]');
        </code></pre>

        <h3><a class="mark" name="route-on">_route.on(), _route.off()</a></h3>

        <p>Start or Stop monitoring window.onhashchange event and check current window.location.hash immediately.</p>
        <pre class="usage"><code class="language-javascript">
            _route.on() : _route
            _route.off() : _route
        </code></pre>

        <h3><a class="mark" name="route-add">_route.add()</a></h3>

        <p>Add sections to route string.</p>
        <pre class="usage"><code class="language-javascript">
            _route.add(string_or_array[, trigger]) : _route
            // string_or_array : a string or an array of items to append
            // trigger         : whether trigger route change event, default is true
        </code></pre>

        <h3><a class="mark" name="route-cut">_route.cut()</a></h3>

        <p>Cut route string from first occurance of given string.</p>
        <p>Slashes matters:</p>
        <ul>
            <li><code>'key'</code> - /my_key_chain/car_key/key:1' -> '/my_'.</li>
            <li><code>'/key'</code> -'/my_key_chain/car_key/key:1' -> '/my_key_chain/car_key'.</li>
            <li><code>'key/'</code> -'/my_key_chain/car_key/key:1' -> '/my_key_chain/car_'.</li>
            <li><code>'/key/'</code> -'/my_key_chain/key/id:1' -> '/my_key_chain'.</li>
        </ul>
        <pre class="usage"><code class="language-javascript">
            _route.cut(section[, trigger]) : _route
            // section : from which the route string will be cut
        </code></pre>

        <h4>EXAMPLES</h4>
        <pre><code class="run-code language-javascript">
            var data = [];
            function save_data(route, params){
                data.push(params);
            }

            _route
                .watch('/books', save_data)
                .watch('books/id:{id}', save_data)
                .watch('books/{id}/{page}', save_data);
            
            // set a test route
            _route.set('/books', false);

            // start monitoring window.location.hash changes
            _route.on();
            // got a match immediately
            ASSERT('_route.on() match', FLAT(data) === '[true]');

            // add something to current route
            _route.add('id:123');
            ASSERT('_route.get()', _route.get() === '/books/id:123');
            // match '/books' and '/books/id:{id}' with the parameter
            ASSERT('_route.add()', FLAT(data) === '[true,true,{"id":"123"}]');

            // remove the 'id:123' section without trigger the event
            _route.cut('/id:', false);
            ASSERT('_route.get() after cut', _route.get() === '/books');
            // no change to the data
            ASSERT('_route.cut()', FLAT(data) === '[true,true,{"id":"123"}]');

            data = [];
            // send an array to _route.add()
            _route.add([123, 456]);
            ASSERT('_route.add() array', _route.get() === '/books/123/456');
            // '/books' match, 'books/id:{id}' no match, 'books/{id}/{page}' match
            ASSERT('_route.add() array result', FLAT(data) === '[true,false,{"id":"123","page":"456"}]');

            // turn off event monitoring
            _route.off();
            // set a new route
            _route.set('my/books/id:789');
            ASSERT('_route.set() result', _route.get() === 'my/books/id:789');
            // no change to the data
            ASSERT('_route.set() array result', FLAT(data) === '[true,false,{"id":"123","page":"456"}]');

            data = [];
            // turn back on
            _route.on();
            // '/books' no match, 'books/id:{id}' match, 'books/{id}/{page}' no match
            ASSERT('_route.on() again', FLAT(data) === '[false,{"id":"789"},false]');
        </code></pre>

    </div>
</body>

</html>