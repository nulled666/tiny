<html>

<head>
    <title>The Tiny Library</title>
    <link href="lib/prism.css" rel="stylesheet">
    <link href="index.css" rel="stylesheet">
    <script type="text/javascript" src="lib/jquery-3.0.0.min.js"></script>
    <script type="text/javascript" src="lib/prism.js"></script>
    <script type="text/javascript" src="tiny.js"></script>
    <script type="text/javascript" src="index.js"></script>
</head>

<body>
    <div class="sidebar">
    </div>
    <div id="content-block" class="content">

        <h1>The Tiny Function Library</h1>

        <h2>Overview</h2>
        <p>This small library is meant to provide some handy functions which are missing in DOM manipulating frameworks like
            jQuery or others.</p>
        <p>And it doesn't want to be another armed-to-teeth full featured framework (might also be hard-to-learn).</p>
        <p>Its goal is providing a minimalist building foundation for modern App-like web pages.</p>

        <hr/>

        <h2>Basic Functions</h2>

        <h3>Console Shorthands</h3>
        <p>Meet the <code>_log()</code>, <code>_info()</code>, <code>_warn()</code>, <code>_error()</code> and helper function
            <code>_xObj()</code>.</p>
        <p>You can easily turn the console log on or off by calling <code>_tiny.showLog()</code> in develop or production environments.</p>
        <p>By default <code>_log()</code> is turned off, you don't want to show everything to the end users, do you?</p>
        <h4>EXAMPLE</h4>
        <pre><code class="run-code language-javascript">
                // enable _log() output when you need them
                _tiny.showLog(true);

                // use them as you would like the console.xxx equivalents
                _log('----------------------------');
                _info('Object created:', {title: 'Untitled', id: 1, author: 'me'});
                _warn('Don\'t do it', 'or nothing would happen');
                _error('An error happened');

                // And if you want a flatten view of an object
                // try the _xObj() helper function
                _log( 'Flatten Object =', _xObj( {
                    id: 123,
                    view: { loaded: true,
                            date: new Date() },
                    method: function(){}
                }) );

                // check your browser's console for the output of above statements
                ASSERT( true );
            </code></pre>

        <hr/>

        <h3>_each()</h3>
        <p>A handy replacement to the <code>for(;;)</code> and <code>for...in</code> loop.</p>
        <p>It works like <code>Array.forEach()</code> method, but you can use it on Objects and do continue or break with a
            return value.</p>
        <h4>USAGE</h4>
        <pre><code class="language-javascript">
            _each(array_or_object, function(value, index, array) {
                return;              // continue to next item in array_or_object
                return any_value;    // break out, and _each() will return any_value
            }, this_arg)             // set 'this' keyword inside the scope to this_arg if given
            </code></pre>
        <h4>EXAMPLE</h4>
        <pre><code class="run-code language-javascript ">
            //==== Work with Array ================
            var numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];
            _each(numbers, function (value, index, array) {
                if (value < 4) return;       // continue
                if (value > 6) return true;  // break
                array[index] = value * 10;
            });
            ASSERT( numbers.join() === '1,2,3,40,50,60,7,8,9' );

            // you can get returned value like this
            var big = _each(numbers, function (value, index, array) {
                if (value > 10)
                    return value;  // return first number bigger than 10
            });
            ASSERT( big === 40 );

            //==== Work with Object ================
            var list = { book: 'book', pen: 'pen' };
            var my_string = '';
            _each(list, function (value, label) {
                my_string += 'It\'s my ' + value + '. ';
            });
            ASSERT( my_string === 'It\'s my book. It\'s my pen. ' );
        </code></pre>
        <h4>ERRORS</h4>
        <pre><code class="run-code language-javascript">
            // A TypeError will be thrown on invalid parameter types
            // Detailed information can be found in console
            try{
                _each('_each test 1');
            }catch(err){
                ASSERT( err instanceof TypeError );
            }
            try{
                _each([1, 2, 3], '_each test 2');
            }catch(err){
                ASSERT( err instanceof TypeError );
            }
            </code></pre>

        <hr/>

        <h3>_extend()</h3>
        <p>Extend an object with new properties. This function does not do deep extension.</p>
        <p>And Javscript preserved keywords can not be used or overwritten.</p>
        <h4>USAGE</h4>
        <pre><code class="language-javascript">
            _extend(target, extensions, keep_old)
            // target     - the target Object or Function you want to extend
            // extensions - an Object contains extensions that will be applied to target
            // keep_old   - set true to skip existing properties
        </code></pre>
        <h4>EXAMPLE</h4>
        <pre><code class="run-code language-javascript">
            var point = { x: 1, y: 2 };
            var point_3d = _extend(point, {z: 3});
            ASSERT( JSON.stringify(point_3d) === '{"x":1,"y":2,"z":3}' );

            // x will be overwrite
            var point_4d = _extend(point_3d, {x: 10, t: 4});
            ASSERT( JSON.stringify(point_4d) === '{"x":10,"y":2,"z":3,"t":4}' );

            // x & y will not be overwrite
            point_4d = _extend(point_3d, {x: 100, y: 100}, true);
            ASSERT( JSON.stringify(point_4d) === '{"x":10,"y":2,"z":3,"t":4}' );
        </code></pre>
        <h4>ERRORS</h4>
        <pre><code class="run-code language-javascript">
            // A TypeError will be thrown on invalid parameter types
            // Detailed information can be found in console
            try{
                _extend('_extend test 1');
            }catch(err){
                ASSERT( err instanceof TypeError );
            }
            try{
                _extend({}, '_extend test 2');
            }catch(err){
                ASSERT( err instanceof TypeError );
            }
            </code></pre>
        <hr/>

        <h3>_namespace()</h3>
        <p>Create a namespace and return the object.</p>
        <p>You can't create namespace with Javascript preserved keywords. The result might appear like nothing has happened.</p>
        <h4>USAGE</h4>
        <pre><code class="language-javascript">
            _namespace(namespace, obj)
            // namespace  - a string which represent the namespace path
            // obj        - the object which will be bind to that namespace
        </code></pre>
        <h4>EXAMPLE</h4>
        <pre><code class="run-code language-javascript">
            // just create a blank namespace
            _namespace('my.project');
            ASSERT( JSON.stringify(my.project) === '{}' );

            // add something to it
            var ns_obj = _namespace('my.project.lib', { id: 1, type: 'blank' });
            ASSERT( my.project.lib.id === 1 );
            ASSERT( ns_obj.type === 'blank' );
        </code></pre>
        <h4>ERRORS</h4>
        <pre><code class="run-code language-javascript">
            // A TypeError will be thrown on invalid parameter types
            // Detailed information can be found in console
            try{
                _namespace(['_namespace', 'test', 1]);
            }catch(err){
                ASSERT( err instanceof TypeError );
            }
            try{
                _namespace('_namespace.test.2', 'invalid');
            }catch(err){
                ASSERT( err instanceof TypeError );
            }
            </code></pre>
        <hr/>

    </div>
</body>

</html>